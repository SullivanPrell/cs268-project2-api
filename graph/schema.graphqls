# GraphQL schema example
#
# https://gqlgen.com/getting-started/

type Error {
  errors: Boolean!
  code: Int!
  message: String!
}

type User {
  _id: String!
  email: String!
  firstName: String!
  lastName: String!
  dateOfBirth: String!
  major: String!
  minor: String!
  willingToHelp: Boolean!
  postIds: [String!]!
  commentIds: [String!]!
  classesTaken: [String!]!
  emailVerified: EmailVerified!
  token: UserToken!
  error: Error!
}

type UserToken {
  token: String!
  expireDate: Int!
}

type PostSingle {
  id: String!
  userId: String!
  content: String!
  commentIDs: [String!]!
  threadId: String!
  subHeader: String!
  title: String!
  class: String!
  error: Error!
}

type Post {
  id: String!
  userId: String!
  content: String!
  commentIDs: [String!]!
  threadId: String!
  subHeader: String!
  title: String!
  class: String!
}

type CommentSingle {
  id: String!
  userId: String!
  postId: String!
  threadId: String!
  content: String!
  error: Error!
}

type Comment {
  id: String!
  userId: String!
  postId: String!
  threadId: String!
  content: String!
 }

type EmailVerified {
  verified: Boolean!
  dateValidated: String!
  email: String!
  error: Error!
}

type Login {
  userId: String!
  email: String!
  token: UserToken!
  error: Error!
}

type VerifyEmail {
  success: Boolean!
  message: String!
  error: Error!
}

type Posts {
  posts: [Post!]!
  error: Error!
}

type Comments {
  comments: [Comment!]!
  error: Error!
}

type Thread {
  id: String!
  name: String!
  tagLine: String!
  classPrefix: String!
}

type ThreadSingle {
  id: String!
  name: String!
  tagLine: String!
  classPrefix: String!
  errors: Error!
}

type Threads {
  threads: [Thread!]!
  errors: Error!
}

input ThreadInput {
  id: String!
  email: String!
  token: String!
}

input ThreadsInput {
  email: String!
  token: String!
}

input CreateUser {
  email: String!
  password: String!
  dateOfBirth: String!
  major: String!
  minor: String
  willingToHelp: Boolean!
  firstName: String!
  lastName: String!
}

input LoginInput {
  email: String!
  password: String!
  token: String!
}

input UserInput {
  email: String!
  token: String!
}

input PostInput {
  email: String!
  token: String!
  postId: String!
}

input PostsInput {
  email: String!
  token: String!
  postIds: [String!]!
}

input PostsByThreadInput {
  email: String!
  token: String!
  threadID: String!
}

input PostsByUserIDInput {
  email: String!
  token: String!
  userID: String!
}

input CommentsByPostIDInput {
  postID: String!
  token: String!
  email: String!
}

input CommentInput {
  email: String!
  token: String!
  commentId: String!
}

input CommentsInput {
  email: String!
  token: String!
  commentIds: [String!]!
}

input CreatePost {
  content: String!
  title: String!
  subHeader: String!
  class: String!
  threadId: String!
  token: String!
}

input CreateComment {
  content: String!
  threadId: String!
  postId: String!
  token: String!
}

input VerifyEmailInput {
  email: String!
  emailToken: String!
  secret: String!
}

type Mutation {
  Login(input: LoginInput!): Login!
  CreateUser(input: CreateUser!): User!
  CreatePost(input: CreatePost!): PostSingle!
  CreateComment(input: CreateComment!): PostSingle!
}

type Query {
  User(input: UserInput!): User!
  Posts(input: PostsInput!): Posts!
  Post(input: PostInput!): PostSingle!
  PostsByUser(input: PostsByUserIDInput!): Posts!
  PostByThread(input: PostsByThreadInput!): Posts!
  Comments(input: CommentsInput!): Comments!
  CommentsByPostID(input: CommentsByPostIDInput!): Comments!
  Thread(input: ThreadInput!): ThreadSingle!
  Threads(input: ThreadsInput!): Threads!
}
